package $sourceClass.packageName();

$imports

#macro (classLiteral $type)##
#if ($type.hasTypeParams())##
(Class<$[$type]>)(Class)${type.simpleName()}.class##
#else##
$[$type.asBoxed()].class##
#end##
#end##

#set ($simpleClassName = $imports.use($targetClass.name()))
#macro (invoke $method)
#set ($type = $method.returnType())
#if ($utils.isKnownAsyncType($type))##
invoke${type.simpleName()}(
           #classLiteral($type.elementTypeOrVoid()),
           "$meta.value()/$method.name()",
           arguments()##
#else##
invokeBlocking(
           #classLiteral($type),
           "$meta.value()/$method.name()",
           arguments()##
#end##

#foreach($p in $method.params())##
                .put("$p.name()", $p.name())##
#if ($foreach.hasNext)

#end
#end)##
#end##

#macro (params $method)
#foreach ($p in $m.params())$[$p.type()] $p.name()#if ($foreach.hasNext), #{end}#end
#end

@$[javax.annotation.Generated]("$processorClass.name()")
public class $simpleClassName extends $[com.slimgears.rxrpc.client.AbstractClient] #if($isInterface)implements $[$sourceClass]#end {
    public $simpleClassName($[com.slimgears.rxrpc.client.RxClient.Session] session) {
        super(session);
    }

#foreach ($m in $methods)
#set ($returnType = $m.returnType())
#set ($elementType = $imports.use($returnType.elementTypeOrSelf()))
#if($isInterface)##
    @Override
#end
    public $[$m.returnType()] $m.name()(#params($m)) {
        return #invoke($m);
    }

#end
}

package $sourceClass.packageName();

`imports`

#set ($simpleClassName = $imports.use($targetClass.name()))
#macro (invoke $method)
    #set ($type = $method.returnType())
    #if ($utils.isKnownAsyncType($type))invoke${type.simpleName()}(#{else}invokeBlocking(#end
        ${type.elementType().asBoxed()}.class,
        "$meta.value()/$method.name()",
        arguments()
        #foreach($p in $method.params())
            .put("$p.name()", $p.name())
        #end)
#end

#macro (params $method)
    #foreach ($p in $m.params())$imports.use($p.type()) $p.name()#if ($foreach.hasNext),#{end}#end
#end

public class $simpleClassName extends $imports.use("com.slimgears.rxrpc.client.AbstractClient") {
    public $simpleClassName($imports.use("java.util.concurrent.Future<com.slimgears.rxrpc.client.RxClient.Session>") session) {
        super(session);
    }

#foreach ($m in $methods)
    #set ($returnType = $m.returnType())
    #set ($elementType = $imports.use($returnType.elementType()))
    public $imports.use($m.returnType()) $m.name()(#params($m)) {
        return #invoke($m);
    }

#end
}

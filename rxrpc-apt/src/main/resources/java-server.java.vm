package $sourceClass.packageName();

`imports`

#set ($simpleClassName = $imports.use($targetClass.name()))
#set ($sourceClassName = $sourceClass.name())

@${imports.use("com.google.auto.service.AutoService")}(${imports.use("com.slimgears.rxrpc.server.EndpointDispatcher.Module")}.class)
public class $simpleClassName implements $imports.use("com.slimgears.rxrpc.server.EndpointDispatcher.Module") {
    #foreach ($m in $methods)
        #set ($methodName = $m.name())
        #set ($returnType = $m.returnType())
        #set ($elementType = $returnType.elementType())
    private final static $imports.use("com.slimgears.rxrpc.server.MethodDispatcher")<$imports.use($sourceClassName), $imports.use($elementType.asBoxed())> $methodName = (target, args) ->
            ${imports.use("com.slimgears.rxrpc.server.Publishers")}.toPublisher(target.$methodName(
            #foreach ($p in $m.params())
            args.get("$p.name()", ${imports.use($p.type())}.class)#if ($foreach.hasNext),#end
            #end));

    #end

    private final static $imports.use("com.slimgears.rxrpc.server.EndpointDispatcher.Factory") dispatcherFactory = $imports.use("com.slimgears.rxrpc.server.EndpointDispatchers")
            .builder(${imports.use($sourceClassName)}.class)
        #foreach($m in $methods)
            .method("$m.name()", $m.name())
        #end
            .buildFactory();

    @Override
    public void configure($imports.use("com.slimgears.rxrpc.server.EndpointDispatcher.Configuration") configuration) {
        configuration.addFactory("$meta.value()", dispatcherFactory);
    }
}

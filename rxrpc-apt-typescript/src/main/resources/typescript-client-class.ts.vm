$imports

/**
 * Generated from $sourceClass.name()
 */
#if ($generateNgModule)
@$[@angular.core.Injectable]()
#end
export class $targetClass.simpleName()##
#if (!$interfaces.isEmpty()) ##
    implements ##
    #foreach ($iface in $interfaces)$[$iface]#if($foreach.hasNext), #end##
    #end##
#end {##

    constructor(private invoker: $[rxrpcJs.RxRpcInvoker]) {
    }

#foreach ($m in $methods)
    public $m.name()(##
    #foreach ($p in $m.params())##
        $p.name(): $[$tsUtils.toTypeScriptType($p.type())]##
        #if ($foreach.hasNext), #end##
        #end)##
            : $[rxjs.Observable<$tsUtils.toTypeScriptType($utils.elementType($m.returnType()))>] {
        return this.invoker.#{if} ($tsUtils.isShared($m))invokeShared#{else}invoke#end('$endpointName/$m.name()', {##
        #foreach ($p in $m.params())##
            $p.name(): $p.name()##
            #if ($foreach.hasNext), ##
            #end##
        #end});
    }##
    #if ($foreach.hasNext)##

##
    #end

#end

#if ($generateNgModule)
    public static provider(invokerToken: $[@angular.core.Type]<RxRpcInvoker>|$[@angular.core.InjectionToken]<RxRpcInvoker>): $[@angular.core.FactoryProvider] {
        return {
            provide: $targetClass.simpleName(),
            useFactory: ${targetClass.simpleName()}Factory,
            deps: [invokerToken]
        };
    }
#end
}

#if ($generateNgModule)
export function ${targetClass.simpleName()}Factory(invoker: RxRpcInvoker) {
    return new ${targetClass.simpleName()}(invoker);
}
#end
